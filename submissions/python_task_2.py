# -*- coding: utf-8 -*-
"""python_task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fE4SrtSquGsX9pVcmxT4UGZd4ONztW9E
"""

import pandas as pd
import networkx as nx

df=pd.read_csv(r"/dataset_3.csv")

df





import pandas as pd

def calculate_distance_matrix(csv_file):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(csv_file)

    # Create an empty DataFrame for the distance matrix
    unique_ids = sorted(set(df['id_start'].unique()) | set(df['id_end'].unique()))
    distance_matrix = pd.DataFrame(0, index=unique_ids, columns=unique_ids)

    # Populate the distance matrix with cumulative distances
    for _, row in df.iterrows():
        start, end, distance = row['id_start'], row['id_end'], row['distance']
        distance_matrix.at[start, end] += distance
        distance_matrix.at[end, start] += distance

    # Set diagonal values to 0
    distance_matrix.values[[range(len(unique_ids))]*2] = 0

    return distance_matrix


csv_file_path = '/dataset_3.csv'
result_matrix = calculate_distance_matrix(csv_file_path)
print(result_matrix)

"""Question 2: Unroll Distance Matrix
Create a function unroll_distance_matrix that takes the DataFrame created in Question 1. The resulting DataFrame should have three columns: columns id_start, id_end, and distance.

All the combinations except for same id_start to id_end must be present in the rows with their distance values from the input DataFrame.
"""

import numpy as np
def unroll_distance_matrix(distance_matrix):
    # Get the upper triangular part of the distance matrix (excluding diagonal)
    upper_triangle = distance_matrix.where(np.triu(np.ones(distance_matrix.shape), k=1).astype(bool))

    # Unstack the upper triangular part and reset index
    unrolled_data = upper_triangle.unstack().reset_index()

    # Rename columns
    unrolled_data.columns = ['id_start', 'id_end', 'distance']

    # Remove rows where id_start is equal to id_end
    unrolled_data = unrolled_data[unrolled_data['id_start'] != unrolled_data['id_end']]

    return unrolled_data


result_matrix = calculate_distance_matrix(r"/dataset_3.csv")
unrolled_data = unroll_distance_matrix(result_matrix)
print(unrolled_data)

"""Question 3: Finding IDs within Percentage Threshold
Create a function find_ids_within_ten_percentage_threshold that takes the DataFrame created in Question 2 and a reference value from the id_start column as an integer.

Calculate average distance for the reference value given as an input and return a sorted list of values from id_start column which lie within 10% (including ceiling and floor) of the reference value's average.

"""

def find_ids_within_ten_percentage_threshold(df, reference_value):
    # Calculate the average distance for the reference value
    reference_avg_distance = df[df['id_start'] == reference_value]['distance'].mean()

    # Calculate the threshold range
    lower_threshold = reference_avg_distance - (0.1 * reference_avg_distance)
    upper_threshold = reference_avg_distance + (0.1 * reference_avg_distance)

    # Find ids within the 10% threshold
    within_threshold_ids = df[(df['distance'] >= lower_threshold) & (df['distance'] <= upper_threshold)]['id_start'].unique()

    # Sort and return the list of ids
    sorted_within_threshold_ids = sorted(within_threshold_ids)

    return sorted_within_threshold_ids


df_question_2 = df

reference_value = 1001400
result = find_ids_within_ten_percentage_threshold(df_question_2, reference_value)
print(result)



"""Question 4: Calculate Toll Rate
Create a function calculate_toll_rate that takes the DataFrame created in Question 2 as input and calculates toll rates based on vehicle types.

The resulting DataFrame should add 5 columns to the input DataFrame: moto, car, rv, bus, and truck with their respective rate coefficients. The toll rates should be calculated by multiplying the distance with the given rate coefficients for each vehicle type:

0.8 for moto
1.2 for car
1.5 for rv
2.2 for bus
3.6 for truck
"""

def calculate_toll_rate(input_df):
    # Create a copy of the input DataFrame to avoid modifying the original
    df = input_df.copy()

    # Define rate coefficients for each vehicle type
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }

    # Calculate toll rates for each vehicle type
    for vehicle_type, rate_coefficient in rate_coefficients.items():
        column_name = f'{vehicle_type}_toll'
        df[column_name] = df['distance'] * rate_coefficient

    return df

result_df = calculate_toll_rate(df)

# Display the resulting DataFrame
print(result_df)









